1、Python 继承
继承允许我们定义继承另一个类的所有方法和属性的类。
父类是继承的类，也称为基类。
子类是从另一个类继承的类，也称为派生类。

2、创建父类
任何类都可以是父类，因此语法与创建任何其他类相同：
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

x = Person("Bill", "Gates")
x.printname()

3、创建子类
要创建从其他类继承功能的类，请在创建子类时将父类作为参数发送：
class Student(Person):
  pass

x = Student("Elon", "Musk")
x.printname()

4、添加 __init__() 函数
到目前为止，我们已经创建了一个子类，它继承了父类的属性和方法。
我们想要把 __init__() 函数添加到子类（而不是 pass 关键字）。

当您添加 __init__() 函数时，子类将不再继承父的 __init__() 函数。
注释：子的 __init__() 函数会覆盖对父的 __init__() 函数的继承。
如需保持父的 __init__() 函数的继承，请添加对父的 __init__() 函数的调用：
class Student(Person):
  def __init__(self, fname, lname):
    Person.__init__(self, fname, lname)

5、使用 super() 函数
Python 还有一个 super() 函数，它会使子类从其父继承所有方法和属性：
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)

6、添加属性
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2020

class Student(Person):
  def __init__(self, fname, lname, year):
    super().__init__(fname, lname)
    self.graduationyear = year

x = Student("Elon", "Musk", 2019)

7、添加方法
class Student(Person):
  def __init__(self, fname, lname, year):
    super().__init__(fname, lname)
    self.graduationyear = year

  def welcome(self):
    print("Welcome", self.firstname, self.lastname, "to the class of", self.graduationyear)
提示：如果您在子类中添加一个与父类中的函数同名的方法，则将覆盖父方法的继承。
