前提、如何避免每次sudo时输入密码
1、打开 /etc/sudoers
sudoedit /etc/sudoers
2、增加下面行
yy ALL=(ALL:ALL) NOPASSWD:ALL

一、Vundle（插件管理）
1、sudo apt-get install vim git
2、git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
3、vim ~/.vimrc
set nocompatible              " required
filetype off                  " required
  
" 你在此设置运行时路径
set rtp+=~/.vim/bundle/Vundle.vim
 
" vundle初始化
call vundle#begin()
 
" 这应该始终是第一个
Plugin 'gmarik/Vundle.vim'

"..........................................................
 
 
"每个插件都应该在这一行之前
"..........................................................

call vundle#end()            " required
filetype plugin indent on    " required

4、vim
:PluginInstall

二、ctags工具（索引）
ctags工具全称Generate tag files for source code
$ sudo apt-get install ctags
$ ctags -R .
在vim中:set tags=./tags(当前路径下的tags文件)
ctrl + ]：跳转到光标处的函数或者变量的定义所在的地方
ctrl + T：返回

三、cscope工具（查找）
查找函数在哪里被调用过或标签在哪些地方出现过
1、sudo apt-get install cscope
2、使用之前 cscope -Rbq
在Vim中使用cscope非常简单，首先调用"cscope add"命令添加一个cscope数据库，
然后调用"cscope find"命令进行查找。
s：查找C语言符号，即查找函数名、宏、枚举值等出现的地方
g：查找函数名、宏、枚举等定义的地方，类似ctags所提供的功能
d：查找本函数调用的函数
c：查找调用本函数的函数
t：查找指定的字符串
e：查找egrep模式，相当于egrep功能
f：查找并打开文件
i：查找包含本文件的文件
.vimrc配置
if has("cscope")
	set csprg=/usr/bin/cscope
	set csto=1
	set cst
	set nocsverb
	" add any database in current directory
	if filereadable("cscope.out")
		cs add cscope.out
	endif
	set csverb
endif

:set cscopequickfix=s-,c-,d-,i-,t-,e-

" nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
" F5查找c符号；F6查找字符串；F7查找函数谁调用了
nmap <silent> <F5> :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <silent> <F6> :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <silent> <F7> :cs find c <C-R>=expand("<cword>")<CR><CR>

四、Tagbar（文件大纲）
Tagbar插件可以把源代码文件生成一个大纲，包括类、方法、变量以及函数名等，
可以选中并快速跳转到目标位置。
1、vim ~/.vimrc
Plugin 'majutsushi/tagbar' " Tag bar

2、vim
:PluginInstall

3、vim ~/.vimrc
" Tagbar 
let g:tagbar_width=25
autocmd BufReadPost *.cpp,*.c,*.h,*.cc,*.cxx call tagbar#autoopen()

五、NerdTree（文件浏览）
NerdTree插件可以显示树形目录
1、vim ~/.vimrc
Plugin 'scrooloose/nerdtree' " Tag bar

2、vim
:PluginInstall

3、vim ~/.vimrc
" 使用F2键快速调出和隐藏它
map <F2> :NERDTreeToggle<CR>

" 打开vim时自动打开NERDTree
"autocmd vimenter * NERDTree

" 打开新的buffer时自动定位到编辑窗口
"autocmd VimEnter * wincmd p

" ctrl + w + h    光标 focus 左侧树形目录
" ctrl + w + l    光标 focus 右侧文件显示窗口
" ctrl + w + w    光标自动在左右侧窗口切换 #！！！

" ctrl + w + j 向下移动
" ctrl + w + k 向上移动
" ctrl + w + h 向左移动
" ctrl + w + l  向右移动
" ctrl + w + t 移动到顶端
" ctrl + w + b 移动到底端

"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"let NERDTreeWinSize=31
"let NERDTreeShowLineNumbers=1
"let NERDTreeAutoCenter=1
"let NERDTreeShowBookmarks=1

六、YouCompleteMe（自动补全）
1、others
sudo apt-get install build-essential cmake python-dev python3-dev
cd ~/.vim/bundle
git clone https://github.com/Valloric/YouCompleteMe.git
cd ~/.vim/bundle/YouCompleteMe
git submodule update --init --recursive
./install.py --clang-completer
"./install.py --all
cp ~/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py ~/.vim/

2、vim ~/.vimrc
let g:ycm_server_python_interpreter='/usr/bin/python'
let g:ycm_global_ycm_extra_conf='~/.vim/.ycm_extra_conf.py'

七、vim-gutentags（自动索引）
由于vim-gutentags依赖ctags工具，因此在使用vim-gutentags插件的系统中必须安装ctags软件。
1、vim ~/.vimrc
Plugin 'ludovicchabant/vim-gutentags'
2、vim
:PluginInstall
3、vim ~/.vimrc
" gutentags搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归 "
let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']
" 配置 ctags 的参数 "
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
4、说明
需要注意的是，gutentags 需要靠上面定义的 gutentags_project_root 判断文件所在的工程，
如果一个文件没有保存在包含 .git、.svn、.root等 定义在 gutentags_project_root 中的文件，
gutentags就不会为该野文件生成 tags。
想要避免的话，你可以在你的野文件目录中放一个名字为 .root 的空白文件，主动告诉 gutentags 这里就是工程目录。

八、其他
set nu!
syntax enable
syntax on
colorscheme desert








































